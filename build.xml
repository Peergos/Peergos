<project name="Peergos" default="dist" basedir=".">
  <description>
    Building Peergos
  </description>

  <!-- Need to run "sudo apt-get install ant-optional" -->
  <taskdef resource="net/sf/antcontrib/antlib.xml">
    <classpath>
      <fileset dir="ant.lib"/>
    </classpath>
  </taskdef>
  
  <property name="src" location="src"/>
  <property name="test.sources" location="src"/>
  <property name="build" location="build"/>
  <property name="dist" location="dist"/>
  <property name="test.reports" location="test.reports"/>
  <property name="timestamp.millis" value="1489731900000"/>

  <path id="dep.runtime">
    <fileset dir="./lib">
        <include name="**/*.jar" />
    </fileset>
  </path>

  <path id="dep.build">
    <fileset dir="./lib-build">
        <include name="**/*.jar" />
    </fileset>
  </path>

  <!-- Arguments to gwtc and devmode targets, set style to Obfuscated for 3X smaller output-->
  <property name="gwt.args" value="-generateJsInteropExports -style Pretty -strict" />

  <!-- Configure path to GWT SDK -->
  <!--<property name="gwt.sdk" location="/home/ian/gwt-2.8.0-rc1" />-->
  <property name="gwt.sdk" location="gwt/gwt-2.8.3" />


  <path id="project.class.path">
    <pathelement location="war/WEB-INF/classes"/>
    <pathelement location="${gwt.sdk}/gwt-user.jar"/>
    <pathelement location="${gwt.sdk}/gwt-dev.jar"/>
    <pathelement location="${gwt.sdk}/validation-api-1.0.0.GA.jar"/>
    <pathelement location="${gwt.sdk}/validation-api-1.0.0.GA-sources.jar"/>
    <fileset dir="war/WEB-INF/lib" includes="**/*.jar"/>
    <!-- Add any additional non-server libs (such as JUnit) here -->
    <pathelement location="lib-build/junit-4.11.jar"/>
    <pathelement location="lib-build/hamcrest-core-1.3.jar"/>
  </path>
  
  <target name="init">
    <mkdir dir="${build}"/>
    <mkdir dir="${test.reports}"/>
  </target>

  <target name="compile" depends="clean, init"
        description="compile the source">
    <javac includeantruntime="false" destdir="${build}" debug="true" debuglevel="lines,vars,source">
      <src>
	<pathelement location="${src}/peergos/shared"/>
	<pathelement location="${src}/peergos/server"/>
	<pathelement location="${src}/peergos/client"/>
      </src>
      <classpath>
	<fileset dir="lib">
          <include name="**/*.jar" />
        </fileset>
	<fileset dir="lib-build">
          <include name="**/*.jar" />
        </fileset>
      </classpath>
    </javac>
  </target>

  <target name="dist" depends="compile" description="generate the distribution">
    <mkdir dir="${dist}/lib"/>
    <copy todir="${dist}/lib">
      <fileset dir="lib"/>
    </copy>
    <copy todir="${build}/native-lib">
      <fileset dir="native-lib"/>
    </copy>
    <manifestclasspath property="manifest_cp" jarfile="myjar.jar">
      <classpath refid="dep.runtime" />
    </manifestclasspath>
    <jar jarfile="${dist}/Peergos.jar" basedir="${build}" includes="peergos/server/**,peergos/shared/**,peergos/client/**,native-lib/**">
      <manifest>
        <attribute name="Main-Class" value="peergos.server.Main"/>
        <attribute name="Class-Path" value="${manifest_cp}"/>
        <attribute name="Created-By" value="Java"/>
        <attribute name="Ant-Version" value="Ant"/>
      </manifest>
    </jar>
    <exec executable="java">
      <arg value="ReproducibleJar.java"/>
      <arg value="${dist}/Peergos.jar"/>
      <arg value="${timestamp.millis}"/>
    </exec>
    <copy todir=".">
      <fileset file="${dist}/Peergos.jar"/>
    </copy>
  </target>

  <target name="test" depends="parallel_test">
    <exec executable="./print_test_errors.sh" failonerror="true">
    </exec>
  </target> 

  <target name="execute.test">
    <!-- we need to have relative path -->
    <pathconvert property="test.source.relative">
      <fileset file="${test.source.absolute}" />
      <map from="${test.sources}/" to="" />
    </pathconvert>
    <!-- run one particular test -->
    <junit fork="true" printsummary="true" haltonfailure="no">
      <jvmarg value="-Xmx2g"/>
      <jvmarg value="-Djava.library.path=native-lib"/>
      <classpath>
	<fileset dir="lib-build">
	  <include name="**/*.jar"/>
	</fileset>
	<fileset dir="lib">
	  <include name="**/*.jar"/>
	</fileset>
	<pathelement location="${build}" />
      </classpath>
      <formatter type="xml" />
      <batchtest todir="${test.reports}" skipNonTests="true">
	<fileset dir="${test.sources}">
          <filename name="${test.source.relative}" />
	</fileset>
      </batchtest>
    </junit>
  </target>

  <target name="parallel_test" depends="compile,dist">
    <for
	keepgoing="false"
	threadCount="1"
	parallel="true"
	param="test.source.absolute">
      <path>
	<fileset dir="${test.sources}">
	  <include name="peergos/server/tests/*.java"/>
	</fileset>
      </path>
      <sequential>
	<antcall target="execute.test">
	  <param name="test.source.absolute" value="@{test.source.absolute}"/>
	</antcall>
      </sequential>
    </for>
  </target>

  <target name="ipfs_tests" depends="compile,dist">
    <for
	keepgoing="false"
	threadCount="1"
	parallel="true"
	param="test.source.absolute">
      <path>
	<fileset dir="${test.sources}">
	  <include name="peergos/server/tests/IpfsUserTests.java"/>
	</fileset>
      </path>
      <sequential>
	<antcall target="execute.test">
	  <param name="test.source.absolute" value="@{test.source.absolute}"/>
	</antcall>
      </sequential>
    </for>
  </target>

  <!-- GWT stuff -->

  
  <target name="libs" description="Copy libs to WEB-INF/lib">
    <mkdir dir="war/WEB-INF/lib" />
    <copy todir="war/WEB-INF/lib" file="${gwt.sdk}/gwt-servlet.jar" />
    <copy todir="war/WEB-INF/lib" file="${gwt.sdk}/gwt-servlet-deps.jar" />
    <!-- Add any additional server libs that need to be copied -->
    <copy todir="war/WEB-INF/lib" file="lib/jnr-fuse-0.3-all.jar" />
  </target>

  <target name="javac" depends="libs" description="Compile java source to bytecode">
    <mkdir dir="war/WEB-INF/classes"/>
    <javac srcdir="src" encoding="utf-8"
        destdir="war/WEB-INF/classes"
        source="11" target="11" nowarn="true"
        debug="true" debuglevel="lines,vars,source">
        <include name="peergos/client/**" />
        <include name="peergos/shared/**" />
      <classpath refid="project.class.path"/>
    </javac>
    <copy todir="war/WEB-INF/classes">
      <fileset dir="src" excludes="**/*.java"/>
    </copy>
  </target>

  <target name="gwtc" depends="javac" description="GWT compile to JavaScript (production mode)">
    <java failonerror="true" fork="true" classname="com.google.gwt.dev.Compiler" maxmemory="2g">
      <classpath>
        <pathelement location="src"/>
        <path refid="project.class.path"/>
      </classpath>
      <arg value="-sourceLevel"/><arg value="11"/>
      <arg line="-war"/>
      <arg value="war"/>
      <!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
      <arg line="${gwt.args}"/>
      <arg value="peergos.Peergos"/>
    </java>
  </target>

  <target name="devmode" depends="javac" description="Run development mode (pass -Dgwt.args=-nosuperDevMode to fallback to classic DevMode)">
    <java failonerror="true" fork="true" classname="com.google.gwt.dev.DevMode" maxmemory="1g">
      <classpath>
        <pathelement location="src"/>
        <path refid="project.class.path"/>
        <pathelement location="${gwt.sdk}/gwt-codeserver.jar"/>
      </classpath>
      <arg value="-startupUrl"/>
      <arg value="Peergos.html"/>
      <arg line="-war"/>
      <arg value="war"/>
      <!-- Additional arguments like -style PRETTY, -logLevel DEBUG or -nosuperDevMode -->
      <arg line="${gwt.args}"/>
      <arg value="peergos.Peergos"/>
      <arg value="peergos.Peergos"/>
    </java>
  </target>
  
  <target name="clean" description="clean up">
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
    <delete dir="${dist}"/>
    <delete dir="war"/>
  </target>
</project>
